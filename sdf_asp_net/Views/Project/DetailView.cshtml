@model sdf_asp_net.ViewModels.ProjectViewModel



@{
    //Layout = "~/Views/Shared/_Layout2.cshtml";
    ViewBag.Title = "DetailView";
}
<link href="~/Content/CSS/ChatSheet.css" rel="stylesheet" />
<div class="col-md-12">
</div>
<div>

    <div class="jumbotron">
        <h1 class="display-4">Projekt: @Html.DisplayFor(model => model.Name)</h1>
        <p class="lead">Beschreibung: @Html.DisplayFor(model => model.Description)</p>
        <hr class="my-4">
        <p>Projektleiter: @Html.DisplayFor(model => model.ManagerName) </p>

        <div>
            <h3>Chat</h3>
            <textarea id="text"></textarea>
            <br />
            <input type="text" id="messageGroup" />
            <input type="button" id="btnSendGroup" value="Send to Group" />
            <br />
            <ul id="discussion"></ul>

        </div>
    </div>



    @{string userName = Model.ManagerName;}


    <hr />
    @using (Html.BeginForm("DownloadFile", "Project", FormMethod.Post))
    {
        <input type="hidden" id="hfFileId" name="FileId" />
        <input type="submit" id="btnDownload" value="Download" style="display:none" />
    }
    <div class="container">
        <div class="row">
            <div class="col-9">
                <div class="list-group" style="height: 700px; overflow-y: scroll; width: 1100px">
                    <ul>
                        <h2>Messageboard</h2>
                        @for (int i = 0; i < Model.Messages.Count; i++)
                        {
                            <li class="list-group-item list-group-item-action flex-column align-items-start active">
                                <div class="d-flex w-100 justify-content-between">
                                    <h2 class="mb-1">@Model.Messages[i].Message</h2>
                                    <small>veröffentlicht am: @Model.Messages[i].Date</small>
                                </div>
                                <small class="mb-1">von: @Model.Messages[i].Author</small>
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@Model.Messages[i].FileName</h6>
                                    <small class="mb-1">@Model.Messages[i].FileContentType</small>
                                </div>
                            </li>
                            if (@ViewBag.IsAuthorized != null && userName != null)
                            {
                                if (userName.ToString().Contains(@ViewBag.IsAuthorized) && @Model.Messages[i].FileName.ToString().Length > 0)
                                {
                                    <a href="javascript:;" class="btn btn-success float-right" onclick="DownloadFile(@Model.Messages[i].Id)">Download</a>
                                }
                                using (Html.BeginForm("Reply", "Project", FormMethod.Post))
                                {
                                    <input type="hidden" name="projectId" class="form-control" value="@Model.Id" aria-label="Message" aria-describedby="button-addon4">
                                    <input type="hidden" name="messageboardId" class="form-control" value="@Model.Messages[i].Id" aria-label="Message" aria-describedby="button-addon4">
                                    <div class="input-group-append" id="button-addon4">
                                        <input type="text" id="messageInput" name="message" class="form-control" placeholder="Deine Antwort" aria-label="Message" aria-describedby="button-addon4">
                                        <input type="submit" id="btnUpload" value=">" class="btn btn-primary" />
                                    </div>
                                }
                            }
                            if (Model.Messages[i].MessageReplies.Count > 0)
                            {
                                <button type="button" class="btn btn-success float-right btn-lg" data-toggle="modal" data-target="#reply@(i)">Diskussion</button>
                            }
                            <br />
                            <br />

                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <br />
    @using (Html.BeginForm("Message", "Project", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        if (@ViewBag.IsAuthorized != null && userName != null)
        {
            if (userName.ToString().Contains(@ViewBag.IsAuthorized))
            {
                <div class="input-group">
                    <input type="text" id="messageInput" name="message" class="form-control" placeholder="Deine Nachricht" aria-label="Message" aria-describedby="button-addon4">
                    <input type="hidden" name="projectId" class="form-control" value="@Html.DisplayFor(model => model.Id)" aria-label="Message" aria-describedby="button-addon4">
                    <div class="input-group-append" id="button-addon4">
                        <input type="file" name="postedFile" class="btn btn-primary" />
                        <input type="submit" id="btnUpload" value=">" class="btn btn-primary" />
                    </div>
                </div>
            }
        }
    }
</div>
<br />




<p>
    <a href="@Url.Action("Index", "Project")" class="btn btn-success float-right btn-lg" role="button" aria-pressed="true">Zurück zu der Projektliste</a>
    @if (@ViewBag.IsAuthorized != null && userName != null)
    {
        if (userName.ToString().Contains(@ViewBag.IsAuthorized))
        {
            <a href="@Url.Action("Edit", "Project", new { id = Model.Id })" class="btn btn-primary float-right btn-lg" role="button" aria-pressed="true">Bearbeiten</a>
        }
    }
</p>

<hr>
@for (int i = 0; i < Model.Messages.Count; i++)
{
    <div class="modal fade" id="reply@(i)" tabindex="-1" role="dialog" aria-labelledby="userListeModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userListeModalLabel">Nachrichtenverlauf</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul class="list-group">
                        @for (int j = 0; j < Model.Messages[i].MessageReplies.Count; j++)
                        {
                            <li>
                                @Model.Messages[i].MessageReplies[j].Author schrieb am @Model.Messages[i].MessageReplies[j].Date.ToString()
                                : @Model.Messages[i].MessageReplies[j].Message
                            </li>
                        }

                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
}



<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script type="text/javascript">
    function DownloadFile(fileId) {
        $("#hfFileId").val(fileId);
        $("#btnDownload")[0].click();
    };

</script>

    @section scripts {
        <!--Script references. -->
        <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
        <!--Reference the SignalR library. -->
        <script src="~/Scripts/jquery.signalR-2.4.0.min.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <script src="~/signalr/hubs"></script>
        <!--SignalR script to update the chat page and send messages.-->
        <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                var text = document.getElementById("text").value += htmlEncode(name) + htmlEncode(message) + '\n';
                checkTextareaHeight(text);
            };



            chat.client.addNewMessageToAll = function (name, message) {

                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };





            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {

                $('#btnSendAll').click(function () {
                    chat.server.sendAll("@User.Identity.Name", $('#messageAll').val());
                });



            chat.server.joinGroup("@User.Identity.Name","@Html.DisplayFor(model => model.Name)");


                $('#btnSendGroup').click(function () {
                    chat.server.sendGroups("@User.Identity.Name","@Html.DisplayFor(model => model.Name)", $('#messageGroup').val());
                });



            });
        });
        // This optional function html-encodes messages for display in the page.

            function checkTextareaHeight(text) {
                text = this.text;

                if (text.selectionStart == text.selectionEnd) {
                    text.scrollTop = text.scrollHeight;
                }
            }
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
        function fillModel() {
            var chatModel = {}
            chatModel.id = 0;
            chatModel.message = $("msg").val();
            chatModel.user = "@User.Identity.Name";
            chatModel.timeStamp = Date.now();
            }
        </script>
    }
